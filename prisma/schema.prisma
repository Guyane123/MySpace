generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl         = env("DATEBASE_DIRECTURL")
}


enum Role {
  USER
  VERIFIED
  ADMIN
  OWNER
}




model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Setting {

  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  userId    String  @unique

  followNotification Boolean @default(true)
  likeNotification Boolean @default(true)
  messageNotification Boolean @default(true)
  commentNotification Boolean @default(true)

  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model User {

  createdAt DateTime @default(now())
  
  id            String    @id @default(cuid())
  name          String?
  bio           String?
  age           Int?
  email         String?   @unique
  password      String?
  role    Role     @default(USER)
  bannerImage   String?
  
  emailVerified Boolean?
  image         String?
  accounts      Account[]

  liking        Likes[]   @relation("liker")
  posts         Post[]


  following     Follows[] @relation("follower")
  followedBy    Follows[] @relation("following")

  conversating     Conversations[] @relation("conversater")
  conversatedBy    Conversations[] @relation("conversating")
  messages Messages[] @relation("messages")

  notifications Notification[] @relation("userNotification")
  authorNotification Notification[] @relation("authorNotification")


  setting Setting[] 
  sessions      Session[]
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)


  @@id([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isViewed  Boolean @default(false)

  userId    String
  notificationAuthorId  String

  type  String 

  postId     String? 

  user         User    @relation("userNotification", fields: [userId], references: [id], onDelete: Cascade)
  notificationAuthor         User    @relation("authorNotification", fields: [notificationAuthorId], references: [id], onDelete: Cascade)
  post         Post?    @relation("postNotification", fields: [postId], references: [id], onDelete: Cascade)

}



model Post {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  

  content   String
  age   Int?

  likedBy   Likes[]  @relation("liking")

  notifications Notification[] @relation("postNotification")

  comments  Post[]   @relation("parrent")
  parrent   Post?    @relation("parrent", fields: [parrentId], references: [id], onDelete: Cascade)
  parrentId String?

  isMessage Boolean @default(false)
}

model Messages {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  conversaterId String
  conversatingId String
  
  author    User     @relation("messages", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String


  conversation Conversations @relation("conversation", fields: [conversaterId, conversatingId], references: [conversaterId,conversatingId])

  content   String
}
model Conversations {

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  index     Int?

  conversaterId  String
  conversatingId String
  conversater    User   @relation("conversater", fields: [conversaterId], references: [id])
  conversating   User   @relation("conversating", fields: [conversatingId], references: [id])

  messages    Messages[] @relation("conversation")



  @@id([conversatingId, conversaterId])
}




model Likes {
  likerId  String
  likingId String
  liker    User   @relation("liker", fields: [likerId], references: [id], onDelete: Cascade)
  liking   Post   @relation("liking", fields: [likingId], references: [id], onDelete: Cascade)


  @@id([likerId, likingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


